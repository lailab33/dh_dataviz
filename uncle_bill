library(shiny)
library(timevis)
library(dplyr)
library(ids)

#loading data about the protest, renaming, and deselecting columns that don't matter
data_copy <- read.csv("project_data.csv")

colnames(data_copy) <- c("college", "source", "description", "link", "start", "date_event", 
                         "number_students", "scope_size", "reason", "cause", "tags", "against", "group_category", "group_name", "effect", "method", "location", "is_linked", "umbrella_tag", "text_ocr")

#DELETE THIS LATER
data_copy <- data_copy %>%
  select(-text_ocr)

#adding a random id to each row, rounding that number and 
data_copy <- data_copy %>%
  mutate(id=sample(1:10000, 44, replace=FALSE))

data_copy$id <- as.numeric(as.character(data_copy$id))

# INPUT SECTION STARTS HERE
ui <- fluidPage(
  
  titlePanel("Vassar and Haverford Protest Timeline"),
  
  br(),
  helpText("This is an interactive timeline of protests recorded by Vassar and Haverford archives,",
           "users can filter what kinds of protests they would like to view on the timeline and",
           "those protests represented are in the table below. If you select a single protest",
           "it will show up under the *Item selected* tab."),
  br(),
  
  # Create a new Row in the UI for selectInputs
  
  fluidRow(
    column(4,
           selectInput("vc.hv",
                       "College:",
                       c("All",
                         unique(as.character(data_copy$college))))
    ),
    column(4,
           selectInput("scp",
                       "Scope:",
                       c("All",
                         unique(as.character(data_copy$scope_size))))
    ),
    column(4,
           selectInput("grp",
                       "Protesting group:",
                       c("All",
                         unique(as.character(data_copy$group_category))))
    )
  ),
  
  fluidRow(
    column(4,
           selectInput("tgs",
                       "Tags:",
                       c("All",
                         unique(as.character(data_copy$tags))))
    ),
    column(4,
           selectInput("agnst",
                       "Against:",
                       c("All",
                         unique(as.character(data_copy$against))))
    ),
    column(4,
           selectInput("mth",
                       "Method:",
                       c("All",
                         unique(as.character(data_copy$method))))
    )
  ),
  
  
  dateRangeInput(
    inputId= "date_range" ,
    label= "Select Date Range to Filter:",
    format = "yyyy-mm-dd", 
    start= as.Date("1970-01-01", format = "%Y-%m-%d"), #IS THIS WHAT ACTUALLY NEEDS TO HAPPEN HERE?
    end= as.Date("2021-01-01", format = "%Y-%m-%d"), #IS THIS WHAT ACTUALLY NEEDS TO HAPPEN HERE?
    startview = "decades",
    separator = " to "
  ),
  
 titlePanel("Selected items:"),
  textOutput("selected", inline = TRUE),
  
  br(),
  
  # Setting the actual output of the above set up
  titlePanel("Timeline of protests"),
  timevisOutput("timeline"),
  
  br(),
  
#Panel that shows up when you select something in the timeline
  wellPanel(titlePanel("Item Currently Selected"),
                   fluidRow(column(4, wellPanel(h4("Object Source"),
                                                htmlOutput(outputId = "protest_source_info")
                   )
                   ),
                   column(4, wellPanel(h4("Protest Details"),
                                       tableOutput(outputId = "protest_info") 
                   )
                   ),
                   column(4, wellPanel(h4("Object ORC"), 
                                       htmlOutput(outputId = "protest_ocr")
                   )
                   ))),

  br(),
  br(),
  br(),
  
  #Table of protest events reflected in the timeline 

### HOW TO MAKE THIS SMALLER ?? AND NOT HAVE OCR EAT UP SO MUCH SPACE
  titlePanel("Table of events in timeline above"),
  DT::dataTableOutput("table")
)


#------------------------------------------------------------------------------------------------------
##SERVER/OUTPUT SECTION STARTS HERE

#adding the "input$selected" part of the code
server <- function(input, output, session) {
  
  #creating a data table of information variable to inputs of the filter 
    data <- reactive({
      
      #this needs to be here for some reason
      data <- data_copy
      
      #the drop down menu selection reactive functions
        ## add : "agnst", "tgs", "mth",
      if (input$vc.hv != "All") {
        data <- data[data$college == input$vc.hv,]
      }  
      if (input$grp != "All") {
        data <- data[data$scope_size == input$scp,]
      } 
      if (input$scp != "All") {
        data <- data[data$group_category == input$grp,]
      }
      if (input$agnst != "All") {
        data <- data[data$against == input$agnst,]
      }
      if (input$tgs != "All") {
        data <- data[data$tags == input$tgs,]
      }
      if (input$mth != "All") {
        data <- data[data$method == input$mth,]
      }
      
      #date range filter code! which worksssssss!!!!!
      data <- data [which(data$start >= input$date_range[1] & data$start <= input$date_range[2]),]
    
    data })
  
#output to render the table
  output$table <- DT::renderDataTable(DT::datatable(data()))

#output to render the timeline
output$timeline <- renderTimevis({
  timevis(data())
  })

#creating a reactive id format thing that can then be plugged in to other things? maybe bypass filter issue
data.id <- reactive({
input$timeline_selected
  })

#output to render what is currently selected, to check that it is currently selecting things
output$selected <- renderText(
  paste(data.id())
)

#Panel 3: protest_info
#What I'm trying to do is to filter so that the input$timeilne (which is the id of the item selects)
  #matches with the row with the same id
  #so then I can print the ocr text that is in the text_ocr column of the row with that particular id
output$protest_ocr <- renderText({ #connect to UI
  ocr <- paste(strong("OCR of object:"),
               data %>%
                 dplyr::filter(data.id$id == input$timeline_selected) %>%
                 print(data$text_ocr)
  )             
})

}

shinyApp(ui = ui, server = server)
